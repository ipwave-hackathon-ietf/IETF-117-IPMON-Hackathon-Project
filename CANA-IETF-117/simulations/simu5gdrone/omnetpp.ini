[General]
image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
sim-time-limit=120s
network = cana.simulations.simu5gdrone.fanet5g

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = false

################ Mobility parameters #####################
# *
**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false
**.routingRecorder.enabled = false

##From Original CANA
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200m
**.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module
#
##########################################################
#              LTE specific parameters                   #
##########################################################

############### Number of Resource Blocks ################
**.numBands = 25 # this value should be kept equal to the number of RBs

############### Transmission Power ##################
**.ueTxPower = 26
**.eNodeBTxPower = 46


# Enable dynamic association of UEs (based on best SINR)
*.drone[*].cellularNic.phy.dynamicCellAssociation = true
**.drone[*].masterId = 1     # useless if dynamic association is disabled
**.drone[*].macCellId = 1    # useless if dynamic association is disabled

# eNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2 

# Enable handover
*.drone[*].cellularNic.phy.enableHandover = true
*.gNodeB*.cellularNic.phy.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second

# X2 and SCTP configuration
*.gNodeB*.numX2Apps = 1    # one x2App per peering eNodeB
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

# ----------------------------------------------------------------------------- #

[Config CANA]
*.numdst = 6
**.dst*.mobility.typename = "stationaryNodeMob"
**.dst[0].mobility.initialX = 300m
**.dst[0].mobility.initialY =  100m
**.dst[0].mobility.initialZ = 0m
**.dst[1].mobility.initialX = 200m
**.dst[1].mobility.initialY = 250m
**.dst[1].mobility.initialZ = 0m
**.dst[2].mobility.initialX = 360m
**.dst[2].mobility.initialY = 220m
**.dst[2].mobility.initialZ = 0m
**.dst[3].mobility.initialX = 300m
**.dst[3].mobility.initialY = 330m
**.dst[3].mobility.initialZ = 0m
**.dst[4].mobility.initialX = 500m
**.dst[4].mobility.initialY = 300m
**.dst[4].mobility.initialZ = 0m
**.dst[5].mobility.initialX = 500m
**.dst[5].mobility.initialY = 200m
**.dst[5].mobility.initialZ = 0m
**.dst[*].mobility.initFromDisplayString = false
**.bstion*.mobility.typename = "stationaryNodeMob"
**.bstion[0].mobility.initialX = 300m
**.bstion[0].mobility.initialY = 20m
**.bstion[0].mobility.initialZ = 0m
#**.bstion[1].mobility.initialX = 20m
#**.bstion[1].mobility.initialY = 200m
#**.bstion[1].mobility.initialZ = 0m
#**.bstion[2].mobility.initialX = 580m
#**.bstion[2].mobility.initialY = 190m
#**.bstion[2].mobility.initialZ = 0m
#**.bstion[3].mobility.initialX = 300m
#**.bstion[3].mobility.initialY = 380m
#**.bstion[3].mobility.initialZ = 0m
**.bstion[*].mobility.initFromDisplayString = false
*.dronesnumber = 10
*.missionid = intuniform(1,4)
*.penetrationrate = 0.4
*.drone*.mobility.typename = "DroneNetMob"
*.drone*.mobility.initFromDisplayString = false
*.drone*.mobility.changeInterval =  1s
*.drone[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.drone[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
*.drone*.mobility.angleDelta = normal(0deg, 30deg)
*.drone[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.drone*.mobility.speed = truncnormal(15mps, 5mps)
*.drone[*].mobility.initFromDisplayString = false

*.host[*].mobility.faceForward = false
